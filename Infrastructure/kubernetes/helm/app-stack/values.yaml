application:
  enabled: true
  
  namespace: dotnet-application

  deployment:
    metadata:
      name: razor-app-deployment
      namespace: dotnet-application
    spec:
      replicas: 1
      selector: 
        matchLabels:
          app: razor-app
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
      minReadySeconds: 5 
      template:
        metadata:
          labels:
            app: razor-app
        spec:
          nodeSelector:
            os: linux
          serviceAccountName: default
          containers:
            - name: razor-app-container
              image: aks101acr.azurecr.io/aks-app1:1.2.0
              imagePullPolicy: Always
              ports:
                - name: http
                  containerPort: 8080
                  protocol: TCP


  service:
    metadata:
      name: razor-app-service
      namespace: dotnet-application
      labels: {}
    spec:
      type: LoadBalancer
      ports:
        - port: 80
          targetPort: 8080
          protocol: TCP
          name: http
      selector: 
        app: razor-app


postgres: 
  nodeSelector: {}

  tolerations: []

  affinity: {}

  namespace: dotnet-application

  persistentVolume:  
    name: postgres-volume
    labels:
      type: local
      app: postgres
    storageClassName: ""
    capacity: 8Gi
    accessModes: 
      - ReadWriteOnce
    azureDisk:
      kind: Managed 
      diskName: pg-disk
      diskURI: "/subscriptions/b822363d-6075-4596-987a-1f24bce600dd/resourceGroups/CertificateIssuer101/providers/Microsoft.Compute/disks/aks101cluster-disk"

  persistentVolumeClaim:
    name: postgres-volume-claim
    labels:
      app: postgres
    storageClassName: ""
    volumeName: postgres-volume
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

  configMap:
    name: postgres-envs
    labels:
      app: postgres
    data:
      POSTGRES_DB: ps_db
      # POSTGRES_USER: postgres
      # POSTGRES_PASSWORD: postgres 
      
  secret:
    name: postgres-secret
    labels:
      app: postgres
    data:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  statefulSet:
    metadata:
      name: postgres
    spec:
      serviceName: postgres
      replicas: 1
      selector:
        matchLabels:
          app: postgres
      template:
        metadata:
          labels:
            app: postgres
        spec:
          initContainers:
            - name: volume-permissions
              image: busybox
              imagePullPolicy: "IfNotPresent"
              command: 
                - sh 
                - -c 
                - "mkdir -p /mnt/data && chown -R 999:999 /mnt/data"
              volumeMounts:
                - mountPath: /mnt/data 
                  name: postgredb
          containers:
            - name: postgres
              image: postgres:17.4 
              imagePullPolicy: "IfNotPresent"
              ports:
                - containerPort: 5432  
              envFrom:
                - configMapRef:
                    name: postgres-envs
                - secretRef:
                    name: postgres-secret
              env:
                - name: PGDATA
                  value: /mnt/data/pgdata
              volumeMounts:
                - mountPath:  /mnt/data
                  name: postgredb
          volumes:
            - name: postgredb
              persistentVolumeClaim:
                claimName: postgres-volume-claim

  service:
    metadata:
      name: postgres-service
      labels:
        app: postgres
    spec:
      type: ClusterIP
      ports:
        - port: 5432
          targetPort: 5432
          protocol: TCP
      selector:
        app: postgres